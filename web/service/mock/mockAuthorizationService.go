// Code generated by MockGen. DO NOT EDIT.
// Source: web/service/authorizationService.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/TulioGuaraldoB/q2-payer-challenge/web/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuthorizationService is a mock of IAuthorizationService interface.
type MockIAuthorizationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizationServiceMockRecorder
}

// MockIAuthorizationServiceMockRecorder is the mock recorder for MockIAuthorizationService.
type MockIAuthorizationServiceMockRecorder struct {
	mock *MockIAuthorizationService
}

// NewMockIAuthorizationService creates a new mock instance.
func NewMockIAuthorizationService(ctrl *gomock.Controller) *MockIAuthorizationService {
	mock := &MockIAuthorizationService{ctrl: ctrl}
	mock.recorder = &MockIAuthorizationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizationService) EXPECT() *MockIAuthorizationServiceMockRecorder {
	return m.recorder
}

// CheckAuthorizerApi mocks base method.
func (m *MockIAuthorizationService) CheckAuthorizerApi() (*dto.AuthorizerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuthorizerApi")
	ret0, _ := ret[0].(*dto.AuthorizerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuthorizerApi indicates an expected call of CheckAuthorizerApi.
func (mr *MockIAuthorizationServiceMockRecorder) CheckAuthorizerApi() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuthorizerApi", reflect.TypeOf((*MockIAuthorizationService)(nil).CheckAuthorizerApi))
}
