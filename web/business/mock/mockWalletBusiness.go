// Code generated by MockGen. DO NOT EDIT.
// Source: web/business/walletBusiness.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	dto "github.com/TulioGuaraldoB/q2-payer-challenge/web/dto"
	model "github.com/TulioGuaraldoB/q2-payer-challenge/web/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIWalletBusiness is a mock of IWalletBusiness interface.
type MockIWalletBusiness struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletBusinessMockRecorder
}

// MockIWalletBusinessMockRecorder is the mock recorder for MockIWalletBusiness.
type MockIWalletBusinessMockRecorder struct {
	mock *MockIWalletBusiness
}

// NewMockIWalletBusiness creates a new mock instance.
func NewMockIWalletBusiness(ctrl *gomock.Controller) *MockIWalletBusiness {
	mock := &MockIWalletBusiness{ctrl: ctrl}
	mock.recorder = &MockIWalletBusinessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletBusiness) EXPECT() *MockIWalletBusinessMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockIWalletBusiness) CreateWallet(wallet *model.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletBusinessMockRecorder) CreateWallet(wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWalletBusiness)(nil).CreateWallet), wallet)
}

// DeleteWallet mocks base method.
func (m *MockIWalletBusiness) DeleteWallet(walletId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWallet", walletId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWallet indicates an expected call of DeleteWallet.
func (mr *MockIWalletBusinessMockRecorder) DeleteWallet(walletId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWallet", reflect.TypeOf((*MockIWalletBusiness)(nil).DeleteWallet), walletId)
}

// DepositToWalletBalance mocks base method.
func (m *MockIWalletBusiness) DepositToWalletBalance(userId uint, newBalance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositToWalletBalance", userId, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositToWalletBalance indicates an expected call of DepositToWalletBalance.
func (mr *MockIWalletBusinessMockRecorder) DepositToWalletBalance(userId, newBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositToWalletBalance", reflect.TypeOf((*MockIWalletBusiness)(nil).DepositToWalletBalance), userId, newBalance)
}

// GetWalletByUserCredentials mocks base method.
func (m *MockIWalletBusiness) GetWalletByUserCredentials(userCredentials *dto.UserCredentials) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserCredentials", userCredentials)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserCredentials indicates an expected call of GetWalletByUserCredentials.
func (mr *MockIWalletBusinessMockRecorder) GetWalletByUserCredentials(userCredentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserCredentials", reflect.TypeOf((*MockIWalletBusiness)(nil).GetWalletByUserCredentials), userCredentials)
}

// GetWalletByUserId mocks base method.
func (m *MockIWalletBusiness) GetWalletByUserId(userId uint) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserId", userId)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserId indicates an expected call of GetWalletByUserId.
func (mr *MockIWalletBusinessMockRecorder) GetWalletByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserId", reflect.TypeOf((*MockIWalletBusiness)(nil).GetWalletByUserId), userId)
}

// PaymentWalletTransaction mocks base method.
func (m *MockIWalletBusiness) PaymentWalletTransaction(transactionRequest *dto.TransactionRequest) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentWalletTransaction", transactionRequest)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PaymentWalletTransaction indicates an expected call of PaymentWalletTransaction.
func (mr *MockIWalletBusinessMockRecorder) PaymentWalletTransaction(transactionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentWalletTransaction", reflect.TypeOf((*MockIWalletBusiness)(nil).PaymentWalletTransaction), transactionRequest)
}

// UpdateWalletBalance mocks base method.
func (m *MockIWalletBusiness) UpdateWalletBalance(walletId uint, newBalance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", walletId, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockIWalletBusinessMockRecorder) UpdateWalletBalance(walletId, newBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockIWalletBusiness)(nil).UpdateWalletBalance), walletId, newBalance)
}
